// Generated by view binder compiler. Do not edit!
package com.dicoding.todoapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.dicoding.todoapp.R;
import com.dicoding.todoapp.ui.list.TaskTitleView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TaskItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final CheckBox itemCheckbox;

  @NonNull
  public final TextView itemTvDate;

  @NonNull
  public final TaskTitleView itemTvTitle;

  @NonNull
  public final LinearLayout layoutMeta;

  private TaskItemBinding(@NonNull RelativeLayout rootView, @NonNull CheckBox itemCheckbox,
      @NonNull TextView itemTvDate, @NonNull TaskTitleView itemTvTitle,
      @NonNull LinearLayout layoutMeta) {
    this.rootView = rootView;
    this.itemCheckbox = itemCheckbox;
    this.itemTvDate = itemTvDate;
    this.itemTvTitle = itemTvTitle;
    this.layoutMeta = layoutMeta;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TaskItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TaskItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.task_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TaskItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.item_checkbox;
      CheckBox itemCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (itemCheckbox == null) {
        break missingId;
      }

      id = R.id.item_tv_date;
      TextView itemTvDate = ViewBindings.findChildViewById(rootView, id);
      if (itemTvDate == null) {
        break missingId;
      }

      id = R.id.item_tv_title;
      TaskTitleView itemTvTitle = ViewBindings.findChildViewById(rootView, id);
      if (itemTvTitle == null) {
        break missingId;
      }

      id = R.id.layout_meta;
      LinearLayout layoutMeta = ViewBindings.findChildViewById(rootView, id);
      if (layoutMeta == null) {
        break missingId;
      }

      return new TaskItemBinding((RelativeLayout) rootView, itemCheckbox, itemTvDate, itemTvTitle,
          layoutMeta);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
